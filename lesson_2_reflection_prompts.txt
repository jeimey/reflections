What happens when you initialize a repository? Why do you need to do it?
It starts the process of tracking the versions of the files within that 
directory.
You just go into the directory and type "git init", and then that 
directory becomes a git repository

How is the staging area different from the working directory 
and the repository? What value do you think it offers?

It's a place to decide what files to place in each commit -- no, I though
all files in the repository are saved with a commit.  


How can you use the staging area to make sure you have one
commit per logical change?
Put things directly in the staging area and commit them after a logical 
change has been made.


What are some situations when branches would be helpful in
 keeping your history organized? How would branches help?
 If you want to create different versions for test purchases.

 If you want to take a completely different approach, and
 this will allow you to save different ideas.

 How do the diagrams help you visualize the branch structure?
 Understanding the branch structure is confusing, but 
 the diagrams (graphs) that git can make for you will show
 you exactly what changes were made on which branch, and this 
 will be helpful for you when you want to merge them later.  

 What is the result of merging two branches together?
  Why do we represent it in the diagram the way we do?

  In theory it should keep all of the changes (either addtions
  or deletions) from both branches and then it will be all in 
  one branch.  The diagram records the history.


What are the pros and cons of Gitâ€™s automatic merging vs.
 always doing merges manually?
 Automatic - fast, quick, but the wrong lines of code might
 be deleted or kept.
 Manual - you have complete control over the what code
 will be in the merged file
 - but this will take more time.  


  